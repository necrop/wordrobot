
//===============================================================
// Letter frequencies
//===============================================================

function drawLetterFrequencies() {
	var standard_letter_frequencies = {E: 12.02, T: 9.10, A: 8.12,
		O: 7.68, I: 7.31, N: 6.95, S: 6.28, R: 6.02, H: 5.92, D: 4.32,
		L: 3.98, U: 2.88, C: 2.71, M: 2.61, F: 2.30, Y: 2.11, W: 2.09,
		G: 2.03, P: 1.82, B: 1.49, V: 1.11, K: 0.69, X: 0.17, Q: 0.11,
		J: 0.10, Z: 0.07};

	var letterdata = computeLetterFrequencies();
	var letter_details = $('#letterDetails');
	var canvas_width = $('#letterFrequenciesContainer').innerWidth() * 0.95;
	var canvas_height = letterdata.length * 25;

	// x-axis scale
	var max_frequency = d3.max(letterdata, function(d) { return d[1]; });
	var x_scale = d3.scale.linear()//pow().exponent(.1)
		.domain([0, max_frequency])
		.range([0, canvas_width * 0.8]);

	// y-axis scale
	var y_scale = d3.scale.ordinal()
		.domain(d3.range(0, letterdata.length))
		.rangePoints([0, canvas_height], 2);

	// Create the SVG element (as a child of the #letterFrequenciesContainer div)
	var canvas = d3.select('#letterFrequenciesContainer').append('svg')
		.attr('width', canvas_width)
		.attr('height', canvas_height)
		.attr('overflow', 'hidden');

	// Add a bordered rectangle the same size as the SVG element, for the background
	canvas.append('rect')
		.attr('x', 0)
		.attr('y', 0)
		.attr('width', canvas_width)
		.attr('height', canvas_height)
		.attr('class', 'chartBackground');

	// Draw reference bars
	var reference_bars = canvas.selectAll('.letterFrequenciesReference')
		.data(letterdata, function (d) { return d[0]; });
	reference_bars.enter().append('rect')
		.attr('class', 'letterFrequenciesReference')
		.attr('x', canvas_width * 0.05)
		.attr('y', function (d, i) { return y_scale(i) - 14; })
		.attr('width', 0)
		.attr('height', 18);

	// Draw histogram bars
	var histogram_bars = canvas.selectAll('.letterFrequenciesBar')
		.data(letterdata, function (d) { return d[0]; });
	histogram_bars.enter().append('rect')
		.attr('class', 'letterFrequenciesBar')
		.attr('x', canvas_width * 0.05)
		.attr('y', function (d, i) { return y_scale(i) - 10; })
		.attr('width', function (d) { return x_scale(d[1]); })
		.attr('height', 10);

	histogram_bars
		.on('mouseover', function (d) {
			showLetterDetails(d, d3.event);
		})
		.on('mouseout', function () {
			hideLetterDetails();
		});


	// Draw letters (as text)
	var letters = canvas.selectAll('.letterFrequenciesLetter')
		.data(letterdata, function (d) { return d[0]; });

	letters.enter().append('text')
		.attr('class', 'letterFrequenciesLetter')
		.attr('x', canvas_width * 0.01)
		.attr('y', function (d, i) { return y_scale(i); })
		.text(function(d) { return d[0]; })
		.style('fill', 'black')
		.style('font-size', 25);

	letters
		.on('mouseover', function (d) {
			showLetterDetails(d, d3.event);
		})
		.on('mouseout', function () {
			hideLetterDetails();
		});


	$('#letterFrequenciesDisplayer').click( function(event) {
		if (buttonIsOn($(this))) {
			reference_bars.transition()
				.duration(300)
				.attr('width', 0);
		} else {
			reference_bars.transition()
				.duration(300)
				.attr('width', function (d) { return x_scale(standard_letter_frequencies[d[0]]); });
		}
		toggleButtonState($(this), 'icon-align-left');
	});


	function showLetterDetails(d, event) {
		// Populate the pop-up
		letter_details.find('h2').text(d[0]);
		letter_details.find('#letterDetailsFq').text(d[1].toPrecision(2));
		letter_details.find('#letterDetailsTypical').text(standard_letter_frequencies[d[0]]);
		// Reposition the pop-up
		letter_details.css('left', (event.pageX) + 'px');
		letter_details.css('top', (event.pageY) + 'px');
		letter_details.css('display', 'block');
	}

	function hideLetterDetails() {
		letter_details.css('display', 'none');
	}

	function computeLetterFrequencies() {
		var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
		var counts = {};
		for (var i = 0; i < letters.length; i += 1) {
			counts[letters[i]] = 0;
		}
		var total = 0;
		for (var i = 0; i < tokendata.length; i += 1) {
			var t = tokendata[i];
			if (t.status === 'punc') {
				continue;
			}
			var characters = t.token.toUpperCase().split('');
			for (var j = 0; j < characters.length; j += 1) {
				if (characters[j] in counts) {
					counts[characters[j]] += 1;
					total += 1;
				}
			}
		}

		var percentages = [];
		if (total > 0) {
			var multiple = 100 / total;
			for (var i = 0; i < letters.length; i += 1) {
				percentages.push([letters[i], multiple * counts[letters[i]]]);
			}
		} else {
			for (var i = 0; i < letters.length; i += 1) {
				percentages.push([letters[i], 0]);
			}
		}
		// Reverse sort by percentage
		percentages.sort(function(a, b) {
			return b[1] - a[1];
		});
		return percentages;
	}

}
